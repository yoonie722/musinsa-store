$retina_mo-vars: (
	'global': (
		offset-x: 0px,
		offset-y: 0px,
		width: 20px,
		height: 20px,
		total-width: 20px,
		total-height: 20px,
		imageSrc: '../img/retina_mo.png'
	),
);
$retina_mo-origin: (
  total-width: 20px,
  total-height: 20px,
  imageSrc: '../img/retina_mo.png'
);

@mixin sprite-size($image) {
	background-size: map-get($image, 'total-width') map-get($image, 'total-height');
}

@mixin sprite-image($image) {
	$image-path: map-get($image, 'imageSrc');
	background-image: url($image-path);
}

@mixin sprite-image-retina($image) {
	$image-path: map-get($image, 'imageSrc');
	$image-path-retina: str-slice($image-path, 1, str-index($image-path, '.png') - 1) + '@2x.png';
	background-image: url($image-path-retina);
}

%set-retina_mo {
  background-repeat: no-repeat;
  @include sprite-image($retina_mo-origin);
  @media
		only screen and (-webkit-min-device-pixel-ratio: 2),
		only screen and (   min--moz-device-pixel-ratio: 2),
		only screen and (     -o-min-device-pixel-ratio: 2/1),
		only screen and (        min-device-pixel-ratio: 2),
		only screen and (                min-resolution: 192dpi),
		only screen and (                min-resolution: 2dppx) {
      @include sprite-size($retina_mo-origin);
      @include sprite-image-retina($retina_mo-origin);
	}
}

@mixin sp-retina_mo($image, $size: true) {
  @extend %set-retina_mo;
	background-position: map-get(map-get($retina_mo-vars, $image), 'offset-x') map-get(map-get($retina_mo-vars, $image), 'offset-y');
	@if $size {
		width: map-get(map-get($retina_mo-vars, $image), 'width');
		height: map-get(map-get($retina_mo-vars, $image), 'height');
	}
}
